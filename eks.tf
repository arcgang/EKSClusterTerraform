# variable "organization" {
#   description = "Organization name inorder to fetch data"
#   type        = string
#   default     = "Hackathon4Life"
# }

# variable "vpcworkspace" {
#   description = "Vpc workspace name inorder to fetch vpc details"
#   type        = string
#   default     = "EKSClusterTerraform"
# }

# terraform {
#   backend "remote" {
#     organization = "Hackathon4Life"
#     hostname = "app.terraform.io"
#     workspaces {
#       name = "EKSClusterTerraform"
#     }
#   }
# }


# data "terraform_remote_state" "vpc" {
#   backend = "remote"
#   config = {
#     organization = var.organization
#     workspaces = {
#       name = var.vpcworkspace
#     }
#   }
# }

# data "aws_eks_cluster" "cluster" {
#   name = module.onerfp-cluster.cluster_id
# }

# data "aws_eks_cluster_auth" "cluster" {
#   name = module.onerfp-cluster.cluster_id
# }

# data "aws_iam_policy_document" "worker_policy" {
#   statement {
#     sid = "1"

#     actions = [
#       "ecr:BatchCheckLayerAvailability",
#       "ecr:BatchGetImage",
#       "ecr:GetDownloadUrlForLayer",
#       "ecr:GetAuthorizationToken",
#     ]

#     resources = [
#       "*",
#     ]
#   }
# }

# resource "aws_iam_policy" "eks_worker_group_additional_policy" {
#   name        = "eks_worker_group_additional_policy"
#   path        = "/"
#   description = "eks worker group additional policy"

#   policy = data.aws_iam_policy_document.worker_policy.json
# } 


# resource "aws_security_group" "all_worker_mgmt" {
#   name_prefix = "all_worker_management"
#   vpc_id      = data.terraform_remote_state.vpc.outputs.vpc_id

#   ingress {
#     from_port = 22
#     to_port   = 22
#     protocol  = "tcp"

#     cidr_blocks = [
#       data.terraform_remote_state.vpc.outputs.vpc_cidr_block,
#       "172.16.0.0/12",
#       "192.168.0.0/16",
#     ]
#   }
# }

# provider "kubernetes" {
#   host                   = data.aws_eks_cluster.cluster.endpoint
#   cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
#   token                  = data.aws_eks_cluster_auth.cluster.token
#   load_config_file       = false
#   version                = "~> 1.9"
# }

# module "onerfp-cluster" {
#   source          = "terraform-aws-modules/eks/aws"
#   cluster_name    = "onerfp-cluster"
#   cluster_version = "1.16"
#   subnets         = data.terraform_remote_state.vpc.outputs.private_subnets
#   vpc_id          = data.terraform_remote_state.vpc.outputs.vpc_id

#   worker_groups = [
#     {
#       instance_type = "t2.large"
#       asg_desired_capacity = 3
#       asg_max_size  = 5
#     }
#   ]

#   # node_groups = { 
#   #   "node1": { 
#   #     "desired_capacity": 1, 
#   #     "instance_type": "t2.large", 
#   #     "k8s_labels": {}, 
#   #     "max_capacity": 10, 
#   #     "min_capacity": 1 
#   #   } 
#   # }

#   worker_additional_security_group_ids = [data.terraform_remote_state.vpc.outputs.vpc_cidr_block]
#   workers_additional_policies = [aws_iam_policy.eks_worker_group_additional_policy.arn]
# }

# output "cluster_endpoint" {
#   description = "Endpoint for EKS control plane."
#   value       = module.onerfp-cluster.cluster_endpoint
# }

# output "cluster_security_group_id" {
#   description = "Security group ids attached to the cluster control plane."
#   value       = module.onerfp-cluster.cluster_security_group_id
# }

# output "kubectl_config" {
#   description = "kubectl config as generated by the module."
#   value       = module.onerfp-cluster.kubeconfig
# }

# output "config_map_aws_auth" {
#   description = "A kubernetes configuration to authenticate to this EKS cluster."
#   value       = module.onerfp-cluster.config_map_aws_auth
# }
